//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/KeyMap/KeyMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyMap"",
    ""maps"": [
        {
            ""name"": ""Keybord"",
            ""id"": ""70ea7575-6380-4b70-9b8c-4882cd1aa4bf"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a2fb22c5-720b-42a9-b3b8-74a823805b62"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack01"",
                    ""type"": ""Value"",
                    ""id"": ""a626169c-cd94-413c-9908-b185d68edcca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cfcf8558-3540-4de1-b287-e8af3742761f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7fa1864d-50a2-4416-b6a5-60bf95e48416"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cf0a24db-9b21-4a0b-a2df-a13ec03920d1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f0b411c2-f993-40d2-add4-7d6a0edda3e3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""af8d9810-f717-4efb-a8e4-f2c53f9473f6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""99e7fe97-9053-470a-8b2a-e7a05ecb4586"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Attack01"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pad"",
            ""id"": ""cc583bca-e6ae-4e00-b1a9-b6c399852aa5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""429c9df8-2061-4f4c-a943-14c4cbb8b525"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack01"",
                    ""type"": ""Button"",
                    ""id"": ""a54c6100-5a33-4ee0-8789-55133ebcd91e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fccb970c-2039-4278-93b0-eb14ce060dc5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b2fdc46-10a2-4358-8608-f7b258a65ff0"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack01"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keybord"",
            ""bindingGroup"": ""Keybord"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Pad"",
            ""bindingGroup"": ""Pad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keybord
        m_Keybord = asset.FindActionMap("Keybord", throwIfNotFound: true);
        m_Keybord_Move = m_Keybord.FindAction("Move", throwIfNotFound: true);
        m_Keybord_Attack01 = m_Keybord.FindAction("Attack01", throwIfNotFound: true);
        // Pad
        m_Pad = asset.FindActionMap("Pad", throwIfNotFound: true);
        m_Pad_Move = m_Pad.FindAction("Move", throwIfNotFound: true);
        m_Pad_Attack01 = m_Pad.FindAction("Attack01", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keybord
    private readonly InputActionMap m_Keybord;
    private List<IKeybordActions> m_KeybordActionsCallbackInterfaces = new List<IKeybordActions>();
    private readonly InputAction m_Keybord_Move;
    private readonly InputAction m_Keybord_Attack01;
    public struct KeybordActions
    {
        private @KeyMap m_Wrapper;
        public KeybordActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Keybord_Move;
        public InputAction @Attack01 => m_Wrapper.m_Keybord_Attack01;
        public InputActionMap Get() { return m_Wrapper.m_Keybord; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeybordActions set) { return set.Get(); }
        public void AddCallbacks(IKeybordActions instance)
        {
            if (instance == null || m_Wrapper.m_KeybordActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeybordActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack01.started += instance.OnAttack01;
            @Attack01.performed += instance.OnAttack01;
            @Attack01.canceled += instance.OnAttack01;
        }

        private void UnregisterCallbacks(IKeybordActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack01.started -= instance.OnAttack01;
            @Attack01.performed -= instance.OnAttack01;
            @Attack01.canceled -= instance.OnAttack01;
        }

        public void RemoveCallbacks(IKeybordActions instance)
        {
            if (m_Wrapper.m_KeybordActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeybordActions instance)
        {
            foreach (var item in m_Wrapper.m_KeybordActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeybordActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeybordActions @Keybord => new KeybordActions(this);

    // Pad
    private readonly InputActionMap m_Pad;
    private List<IPadActions> m_PadActionsCallbackInterfaces = new List<IPadActions>();
    private readonly InputAction m_Pad_Move;
    private readonly InputAction m_Pad_Attack01;
    public struct PadActions
    {
        private @KeyMap m_Wrapper;
        public PadActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Pad_Move;
        public InputAction @Attack01 => m_Wrapper.m_Pad_Attack01;
        public InputActionMap Get() { return m_Wrapper.m_Pad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PadActions set) { return set.Get(); }
        public void AddCallbacks(IPadActions instance)
        {
            if (instance == null || m_Wrapper.m_PadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PadActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack01.started += instance.OnAttack01;
            @Attack01.performed += instance.OnAttack01;
            @Attack01.canceled += instance.OnAttack01;
        }

        private void UnregisterCallbacks(IPadActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack01.started -= instance.OnAttack01;
            @Attack01.performed -= instance.OnAttack01;
            @Attack01.canceled -= instance.OnAttack01;
        }

        public void RemoveCallbacks(IPadActions instance)
        {
            if (m_Wrapper.m_PadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPadActions instance)
        {
            foreach (var item in m_Wrapper.m_PadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PadActions @Pad => new PadActions(this);
    private int m_KeybordSchemeIndex = -1;
    public InputControlScheme KeybordScheme
    {
        get
        {
            if (m_KeybordSchemeIndex == -1) m_KeybordSchemeIndex = asset.FindControlSchemeIndex("Keybord");
            return asset.controlSchemes[m_KeybordSchemeIndex];
        }
    }
    private int m_PadSchemeIndex = -1;
    public InputControlScheme PadScheme
    {
        get
        {
            if (m_PadSchemeIndex == -1) m_PadSchemeIndex = asset.FindControlSchemeIndex("Pad");
            return asset.controlSchemes[m_PadSchemeIndex];
        }
    }
    public interface IKeybordActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack01(InputAction.CallbackContext context);
    }
    public interface IPadActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack01(InputAction.CallbackContext context);
    }
}
