//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/KeyMap/KeyMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyMap"",
    ""maps"": [
        {
            ""name"": ""Keybord"",
            ""id"": ""70ea7575-6380-4b70-9b8c-4882cd1aa4bf"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a2fb22c5-720b-42a9-b3b8-74a823805b62"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Value"",
                    ""id"": ""a626169c-cd94-413c-9908-b185d68edcca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Value"",
                    ""id"": ""d3f69c27-72ff-4a30-a33e-09372b915c2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Debug"",
                    ""type"": ""Button"",
                    ""id"": ""9dabb0dc-9da7-4ddd-bdf9-0ed297c0855f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cfcf8558-3540-4de1-b287-e8af3742761f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7fa1864d-50a2-4416-b6a5-60bf95e48416"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cf0a24db-9b21-4a0b-a2df-a13ec03920d1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f0b411c2-f993-40d2-add4-7d6a0edda3e3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""af8d9810-f717-4efb-a8e4-f2c53f9473f6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""99e7fe97-9053-470a-8b2a-e7a05ecb4586"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0458d78e-e124-428c-a9c8-c0bb92254ddc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0cfa3f5-bbd1-4245-a508-25badbda142c"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord"",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pad_CardinalDirection"",
            ""id"": ""cc583bca-e6ae-4e00-b1a9-b6c399852aa5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""429c9df8-2061-4f4c-a943-14c4cbb8b525"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Value"",
                    ""id"": ""a54c6100-5a33-4ee0-8789-55133ebcd91e"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Value"",
                    ""id"": ""5e89dfbb-afbf-4ffa-80f0-414368504ace"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack3"",
                    ""type"": ""Value"",
                    ""id"": ""f9b04932-b790-45ef-b1a1-a18a35eb91b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack4"",
                    ""type"": ""Value"",
                    ""id"": ""af289515-a525-4516-9974-60703c8e89e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fccb970c-2039-4278-93b0-eb14ce060dc5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""847e7fdf-da81-4585-a2a3-8ba0ef77b145"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b2fdc46-10a2-4358-8608-f7b258a65ff0"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32f16448-75c9-4c09-b600-04cc2909672e"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d462124-4c77-4f23-9708-75f1bcc3779c"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""332249c4-8f0e-40d0-912d-5275b8995e1d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pad_DoubleStick"",
            ""id"": ""8200b354-7cb7-4171-aedf-8526b27a4dd4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a8fdbcb5-b5bb-40b0-9559-238f0ee0d1ba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AimMove"",
                    ""type"": ""Value"",
                    ""id"": ""9c1e13b0-7563-40e7-8fa8-3c808af1881f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Value"",
                    ""id"": ""dea7b152-7e4c-4235-a34d-a246f3af9f8c"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Value"",
                    ""id"": ""b087b4c9-454f-4f60-8fcd-a8369214b283"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack3"",
                    ""type"": ""Value"",
                    ""id"": ""6047ed66-36e8-4bf7-b4f1-9efbf66bbf91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack4"",
                    ""type"": ""Value"",
                    ""id"": ""db0ed2a0-ff18-459b-9c3e-963d0ec934ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6fbfb6db-c7c4-4cd7-a0dd-2b898b4a422e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41ebc584-d92b-470e-aeca-3d22101ef6b6"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b00ec55-7310-4cb2-98ec-9f9905951b89"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a5fbc81-babe-4987-b821-5ac9a57a99f7"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9843d085-5889-436c-b2dc-1c8e473aace6"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37113a6a-817f-459e-9e8a-d578daf54064"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16eb14c2-7309-4341-8693-5eeb9f633e80"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""AimMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7c16a66-08bd-46fd-b342-96e30123eaee"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""AimMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Joy"",
            ""id"": ""6713fd39-8d44-454f-913c-c14990b16f79"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""72c5b45b-4f5f-4637-b094-789cd459f726"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Button"",
                    ""id"": ""c22983b9-01a6-46d4-9058-fdd625350e87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Button"",
                    ""id"": ""37f637d3-a3d9-4a81-a8bd-eca7f25c4073"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack3"",
                    ""type"": ""Button"",
                    ""id"": ""eed858bd-a376-4b5d-98a8-a991b9f333a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack4"",
                    ""type"": ""Button"",
                    ""id"": ""fabb426c-b3bb-49cd-9be6-829c440fb17f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9670be44-93f0-4889-ae54-a5e81cdd7ce2"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c960c8a5-d034-4b52-aa91-1d8288f41226"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/button7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfd9e40a-2043-4fb4-9a65-8b2bb4e9f41c"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/button6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0dd11a7-e637-40ac-b94d-35f7d2687887"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f092636-0dfd-4150-8cc9-b7134dc3f2a5"",
                    ""path"": ""<HID::Nintendo Co., Ltd. USB Gamepad>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pad"",
                    ""action"": ""Attack4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Public"",
            ""id"": ""3fcbcc14-661e-49b8-8ed4-28887844e6f4"",
            ""actions"": [
                {
                    ""name"": ""Positive"",
                    ""type"": ""Button"",
                    ""id"": ""13f8a138-4665-4ccb-b0da-24fae67bb84b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Negative"",
                    ""type"": ""Button"",
                    ""id"": ""2f8bc29c-9da8-473a-b80a-8fd48da64d3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""cc353b85-7642-41e2-98fd-70a034188f7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""830b4a69-3f08-4ba0-b746-d723d6bb6554"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Positive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44fa81bc-1115-4442-b236-97d3c4b68b0e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Positive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab004db0-a6ca-496d-b8bf-b01fe07cb928"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Positive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05f73201-5ff1-45ec-9605-9a3656c9ef78"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Positive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beecdeb3-828d-43d0-b5ca-99384e03fb70"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Positive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3060cb2d-bf4e-4321-9dd7-ccb53fa76335"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Negative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8881fbb3-20fb-4b2f-b2a9-710d1c9dd837"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Negative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55356a63-4866-486b-9df3-ca5faf203ca0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Negative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5cf8d12-9e17-49b3-affa-76eabee96304"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25f40cc3-3d2d-4979-9629-4c74d85f5e92"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06218d8b-2b25-4ede-b37d-11d8967e570f"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keybord"",
            ""bindingGroup"": ""Keybord"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Pad"",
            ""bindingGroup"": ""Pad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""All"",
            ""bindingGroup"": ""All"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keybord
        m_Keybord = asset.FindActionMap("Keybord", throwIfNotFound: true);
        m_Keybord_Move = m_Keybord.FindAction("Move", throwIfNotFound: true);
        m_Keybord_Attack1 = m_Keybord.FindAction("Attack1", throwIfNotFound: true);
        m_Keybord_Attack2 = m_Keybord.FindAction("Attack2", throwIfNotFound: true);
        m_Keybord_Debug = m_Keybord.FindAction("Debug", throwIfNotFound: true);
        // Pad_CardinalDirection
        m_Pad_CardinalDirection = asset.FindActionMap("Pad_CardinalDirection", throwIfNotFound: true);
        m_Pad_CardinalDirection_Move = m_Pad_CardinalDirection.FindAction("Move", throwIfNotFound: true);
        m_Pad_CardinalDirection_Attack1 = m_Pad_CardinalDirection.FindAction("Attack1", throwIfNotFound: true);
        m_Pad_CardinalDirection_Attack2 = m_Pad_CardinalDirection.FindAction("Attack2", throwIfNotFound: true);
        m_Pad_CardinalDirection_Attack3 = m_Pad_CardinalDirection.FindAction("Attack3", throwIfNotFound: true);
        m_Pad_CardinalDirection_Attack4 = m_Pad_CardinalDirection.FindAction("Attack4", throwIfNotFound: true);
        // Pad_DoubleStick
        m_Pad_DoubleStick = asset.FindActionMap("Pad_DoubleStick", throwIfNotFound: true);
        m_Pad_DoubleStick_Move = m_Pad_DoubleStick.FindAction("Move", throwIfNotFound: true);
        m_Pad_DoubleStick_AimMove = m_Pad_DoubleStick.FindAction("AimMove", throwIfNotFound: true);
        m_Pad_DoubleStick_Attack1 = m_Pad_DoubleStick.FindAction("Attack1", throwIfNotFound: true);
        m_Pad_DoubleStick_Attack2 = m_Pad_DoubleStick.FindAction("Attack2", throwIfNotFound: true);
        m_Pad_DoubleStick_Attack3 = m_Pad_DoubleStick.FindAction("Attack3", throwIfNotFound: true);
        m_Pad_DoubleStick_Attack4 = m_Pad_DoubleStick.FindAction("Attack4", throwIfNotFound: true);
        // Joy
        m_Joy = asset.FindActionMap("Joy", throwIfNotFound: true);
        m_Joy_Move = m_Joy.FindAction("Move", throwIfNotFound: true);
        m_Joy_Attack1 = m_Joy.FindAction("Attack1", throwIfNotFound: true);
        m_Joy_Attack2 = m_Joy.FindAction("Attack2", throwIfNotFound: true);
        m_Joy_Attack3 = m_Joy.FindAction("Attack3", throwIfNotFound: true);
        m_Joy_Attack4 = m_Joy.FindAction("Attack4", throwIfNotFound: true);
        // Public
        m_Public = asset.FindActionMap("Public", throwIfNotFound: true);
        m_Public_Positive = m_Public.FindAction("Positive", throwIfNotFound: true);
        m_Public_Negative = m_Public.FindAction("Negative", throwIfNotFound: true);
        m_Public_Pause = m_Public.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keybord
    private readonly InputActionMap m_Keybord;
    private List<IKeybordActions> m_KeybordActionsCallbackInterfaces = new List<IKeybordActions>();
    private readonly InputAction m_Keybord_Move;
    private readonly InputAction m_Keybord_Attack1;
    private readonly InputAction m_Keybord_Attack2;
    private readonly InputAction m_Keybord_Debug;
    public struct KeybordActions
    {
        private @KeyMap m_Wrapper;
        public KeybordActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Keybord_Move;
        public InputAction @Attack1 => m_Wrapper.m_Keybord_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_Keybord_Attack2;
        public InputAction @Debug => m_Wrapper.m_Keybord_Debug;
        public InputActionMap Get() { return m_Wrapper.m_Keybord; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeybordActions set) { return set.Get(); }
        public void AddCallbacks(IKeybordActions instance)
        {
            if (instance == null || m_Wrapper.m_KeybordActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeybordActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack1.started += instance.OnAttack1;
            @Attack1.performed += instance.OnAttack1;
            @Attack1.canceled += instance.OnAttack1;
            @Attack2.started += instance.OnAttack2;
            @Attack2.performed += instance.OnAttack2;
            @Attack2.canceled += instance.OnAttack2;
            @Debug.started += instance.OnDebug;
            @Debug.performed += instance.OnDebug;
            @Debug.canceled += instance.OnDebug;
        }

        private void UnregisterCallbacks(IKeybordActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack1.started -= instance.OnAttack1;
            @Attack1.performed -= instance.OnAttack1;
            @Attack1.canceled -= instance.OnAttack1;
            @Attack2.started -= instance.OnAttack2;
            @Attack2.performed -= instance.OnAttack2;
            @Attack2.canceled -= instance.OnAttack2;
            @Debug.started -= instance.OnDebug;
            @Debug.performed -= instance.OnDebug;
            @Debug.canceled -= instance.OnDebug;
        }

        public void RemoveCallbacks(IKeybordActions instance)
        {
            if (m_Wrapper.m_KeybordActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeybordActions instance)
        {
            foreach (var item in m_Wrapper.m_KeybordActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeybordActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeybordActions @Keybord => new KeybordActions(this);

    // Pad_CardinalDirection
    private readonly InputActionMap m_Pad_CardinalDirection;
    private List<IPad_CardinalDirectionActions> m_Pad_CardinalDirectionActionsCallbackInterfaces = new List<IPad_CardinalDirectionActions>();
    private readonly InputAction m_Pad_CardinalDirection_Move;
    private readonly InputAction m_Pad_CardinalDirection_Attack1;
    private readonly InputAction m_Pad_CardinalDirection_Attack2;
    private readonly InputAction m_Pad_CardinalDirection_Attack3;
    private readonly InputAction m_Pad_CardinalDirection_Attack4;
    public struct Pad_CardinalDirectionActions
    {
        private @KeyMap m_Wrapper;
        public Pad_CardinalDirectionActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Pad_CardinalDirection_Move;
        public InputAction @Attack1 => m_Wrapper.m_Pad_CardinalDirection_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_Pad_CardinalDirection_Attack2;
        public InputAction @Attack3 => m_Wrapper.m_Pad_CardinalDirection_Attack3;
        public InputAction @Attack4 => m_Wrapper.m_Pad_CardinalDirection_Attack4;
        public InputActionMap Get() { return m_Wrapper.m_Pad_CardinalDirection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Pad_CardinalDirectionActions set) { return set.Get(); }
        public void AddCallbacks(IPad_CardinalDirectionActions instance)
        {
            if (instance == null || m_Wrapper.m_Pad_CardinalDirectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Pad_CardinalDirectionActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack1.started += instance.OnAttack1;
            @Attack1.performed += instance.OnAttack1;
            @Attack1.canceled += instance.OnAttack1;
            @Attack2.started += instance.OnAttack2;
            @Attack2.performed += instance.OnAttack2;
            @Attack2.canceled += instance.OnAttack2;
            @Attack3.started += instance.OnAttack3;
            @Attack3.performed += instance.OnAttack3;
            @Attack3.canceled += instance.OnAttack3;
            @Attack4.started += instance.OnAttack4;
            @Attack4.performed += instance.OnAttack4;
            @Attack4.canceled += instance.OnAttack4;
        }

        private void UnregisterCallbacks(IPad_CardinalDirectionActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack1.started -= instance.OnAttack1;
            @Attack1.performed -= instance.OnAttack1;
            @Attack1.canceled -= instance.OnAttack1;
            @Attack2.started -= instance.OnAttack2;
            @Attack2.performed -= instance.OnAttack2;
            @Attack2.canceled -= instance.OnAttack2;
            @Attack3.started -= instance.OnAttack3;
            @Attack3.performed -= instance.OnAttack3;
            @Attack3.canceled -= instance.OnAttack3;
            @Attack4.started -= instance.OnAttack4;
            @Attack4.performed -= instance.OnAttack4;
            @Attack4.canceled -= instance.OnAttack4;
        }

        public void RemoveCallbacks(IPad_CardinalDirectionActions instance)
        {
            if (m_Wrapper.m_Pad_CardinalDirectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPad_CardinalDirectionActions instance)
        {
            foreach (var item in m_Wrapper.m_Pad_CardinalDirectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Pad_CardinalDirectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Pad_CardinalDirectionActions @Pad_CardinalDirection => new Pad_CardinalDirectionActions(this);

    // Pad_DoubleStick
    private readonly InputActionMap m_Pad_DoubleStick;
    private List<IPad_DoubleStickActions> m_Pad_DoubleStickActionsCallbackInterfaces = new List<IPad_DoubleStickActions>();
    private readonly InputAction m_Pad_DoubleStick_Move;
    private readonly InputAction m_Pad_DoubleStick_AimMove;
    private readonly InputAction m_Pad_DoubleStick_Attack1;
    private readonly InputAction m_Pad_DoubleStick_Attack2;
    private readonly InputAction m_Pad_DoubleStick_Attack3;
    private readonly InputAction m_Pad_DoubleStick_Attack4;
    public struct Pad_DoubleStickActions
    {
        private @KeyMap m_Wrapper;
        public Pad_DoubleStickActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Pad_DoubleStick_Move;
        public InputAction @AimMove => m_Wrapper.m_Pad_DoubleStick_AimMove;
        public InputAction @Attack1 => m_Wrapper.m_Pad_DoubleStick_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_Pad_DoubleStick_Attack2;
        public InputAction @Attack3 => m_Wrapper.m_Pad_DoubleStick_Attack3;
        public InputAction @Attack4 => m_Wrapper.m_Pad_DoubleStick_Attack4;
        public InputActionMap Get() { return m_Wrapper.m_Pad_DoubleStick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Pad_DoubleStickActions set) { return set.Get(); }
        public void AddCallbacks(IPad_DoubleStickActions instance)
        {
            if (instance == null || m_Wrapper.m_Pad_DoubleStickActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Pad_DoubleStickActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @AimMove.started += instance.OnAimMove;
            @AimMove.performed += instance.OnAimMove;
            @AimMove.canceled += instance.OnAimMove;
            @Attack1.started += instance.OnAttack1;
            @Attack1.performed += instance.OnAttack1;
            @Attack1.canceled += instance.OnAttack1;
            @Attack2.started += instance.OnAttack2;
            @Attack2.performed += instance.OnAttack2;
            @Attack2.canceled += instance.OnAttack2;
            @Attack3.started += instance.OnAttack3;
            @Attack3.performed += instance.OnAttack3;
            @Attack3.canceled += instance.OnAttack3;
            @Attack4.started += instance.OnAttack4;
            @Attack4.performed += instance.OnAttack4;
            @Attack4.canceled += instance.OnAttack4;
        }

        private void UnregisterCallbacks(IPad_DoubleStickActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @AimMove.started -= instance.OnAimMove;
            @AimMove.performed -= instance.OnAimMove;
            @AimMove.canceled -= instance.OnAimMove;
            @Attack1.started -= instance.OnAttack1;
            @Attack1.performed -= instance.OnAttack1;
            @Attack1.canceled -= instance.OnAttack1;
            @Attack2.started -= instance.OnAttack2;
            @Attack2.performed -= instance.OnAttack2;
            @Attack2.canceled -= instance.OnAttack2;
            @Attack3.started -= instance.OnAttack3;
            @Attack3.performed -= instance.OnAttack3;
            @Attack3.canceled -= instance.OnAttack3;
            @Attack4.started -= instance.OnAttack4;
            @Attack4.performed -= instance.OnAttack4;
            @Attack4.canceled -= instance.OnAttack4;
        }

        public void RemoveCallbacks(IPad_DoubleStickActions instance)
        {
            if (m_Wrapper.m_Pad_DoubleStickActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPad_DoubleStickActions instance)
        {
            foreach (var item in m_Wrapper.m_Pad_DoubleStickActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Pad_DoubleStickActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Pad_DoubleStickActions @Pad_DoubleStick => new Pad_DoubleStickActions(this);

    // Joy
    private readonly InputActionMap m_Joy;
    private List<IJoyActions> m_JoyActionsCallbackInterfaces = new List<IJoyActions>();
    private readonly InputAction m_Joy_Move;
    private readonly InputAction m_Joy_Attack1;
    private readonly InputAction m_Joy_Attack2;
    private readonly InputAction m_Joy_Attack3;
    private readonly InputAction m_Joy_Attack4;
    public struct JoyActions
    {
        private @KeyMap m_Wrapper;
        public JoyActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Joy_Move;
        public InputAction @Attack1 => m_Wrapper.m_Joy_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_Joy_Attack2;
        public InputAction @Attack3 => m_Wrapper.m_Joy_Attack3;
        public InputAction @Attack4 => m_Wrapper.m_Joy_Attack4;
        public InputActionMap Get() { return m_Wrapper.m_Joy; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoyActions set) { return set.Get(); }
        public void AddCallbacks(IJoyActions instance)
        {
            if (instance == null || m_Wrapper.m_JoyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JoyActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack1.started += instance.OnAttack1;
            @Attack1.performed += instance.OnAttack1;
            @Attack1.canceled += instance.OnAttack1;
            @Attack2.started += instance.OnAttack2;
            @Attack2.performed += instance.OnAttack2;
            @Attack2.canceled += instance.OnAttack2;
            @Attack3.started += instance.OnAttack3;
            @Attack3.performed += instance.OnAttack3;
            @Attack3.canceled += instance.OnAttack3;
            @Attack4.started += instance.OnAttack4;
            @Attack4.performed += instance.OnAttack4;
            @Attack4.canceled += instance.OnAttack4;
        }

        private void UnregisterCallbacks(IJoyActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack1.started -= instance.OnAttack1;
            @Attack1.performed -= instance.OnAttack1;
            @Attack1.canceled -= instance.OnAttack1;
            @Attack2.started -= instance.OnAttack2;
            @Attack2.performed -= instance.OnAttack2;
            @Attack2.canceled -= instance.OnAttack2;
            @Attack3.started -= instance.OnAttack3;
            @Attack3.performed -= instance.OnAttack3;
            @Attack3.canceled -= instance.OnAttack3;
            @Attack4.started -= instance.OnAttack4;
            @Attack4.performed -= instance.OnAttack4;
            @Attack4.canceled -= instance.OnAttack4;
        }

        public void RemoveCallbacks(IJoyActions instance)
        {
            if (m_Wrapper.m_JoyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJoyActions instance)
        {
            foreach (var item in m_Wrapper.m_JoyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JoyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JoyActions @Joy => new JoyActions(this);

    // Public
    private readonly InputActionMap m_Public;
    private List<IPublicActions> m_PublicActionsCallbackInterfaces = new List<IPublicActions>();
    private readonly InputAction m_Public_Positive;
    private readonly InputAction m_Public_Negative;
    private readonly InputAction m_Public_Pause;
    public struct PublicActions
    {
        private @KeyMap m_Wrapper;
        public PublicActions(@KeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Positive => m_Wrapper.m_Public_Positive;
        public InputAction @Negative => m_Wrapper.m_Public_Negative;
        public InputAction @Pause => m_Wrapper.m_Public_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Public; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PublicActions set) { return set.Get(); }
        public void AddCallbacks(IPublicActions instance)
        {
            if (instance == null || m_Wrapper.m_PublicActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PublicActionsCallbackInterfaces.Add(instance);
            @Positive.started += instance.OnPositive;
            @Positive.performed += instance.OnPositive;
            @Positive.canceled += instance.OnPositive;
            @Negative.started += instance.OnNegative;
            @Negative.performed += instance.OnNegative;
            @Negative.canceled += instance.OnNegative;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPublicActions instance)
        {
            @Positive.started -= instance.OnPositive;
            @Positive.performed -= instance.OnPositive;
            @Positive.canceled -= instance.OnPositive;
            @Negative.started -= instance.OnNegative;
            @Negative.performed -= instance.OnNegative;
            @Negative.canceled -= instance.OnNegative;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPublicActions instance)
        {
            if (m_Wrapper.m_PublicActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPublicActions instance)
        {
            foreach (var item in m_Wrapper.m_PublicActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PublicActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PublicActions @Public => new PublicActions(this);
    private int m_KeybordSchemeIndex = -1;
    public InputControlScheme KeybordScheme
    {
        get
        {
            if (m_KeybordSchemeIndex == -1) m_KeybordSchemeIndex = asset.FindControlSchemeIndex("Keybord");
            return asset.controlSchemes[m_KeybordSchemeIndex];
        }
    }
    private int m_PadSchemeIndex = -1;
    public InputControlScheme PadScheme
    {
        get
        {
            if (m_PadSchemeIndex == -1) m_PadSchemeIndex = asset.FindControlSchemeIndex("Pad");
            return asset.controlSchemes[m_PadSchemeIndex];
        }
    }
    private int m_AllSchemeIndex = -1;
    public InputControlScheme AllScheme
    {
        get
        {
            if (m_AllSchemeIndex == -1) m_AllSchemeIndex = asset.FindControlSchemeIndex("All");
            return asset.controlSchemes[m_AllSchemeIndex];
        }
    }
    public interface IKeybordActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnDebug(InputAction.CallbackContext context);
    }
    public interface IPad_CardinalDirectionActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnAttack3(InputAction.CallbackContext context);
        void OnAttack4(InputAction.CallbackContext context);
    }
    public interface IPad_DoubleStickActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAimMove(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnAttack3(InputAction.CallbackContext context);
        void OnAttack4(InputAction.CallbackContext context);
    }
    public interface IJoyActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnAttack3(InputAction.CallbackContext context);
        void OnAttack4(InputAction.CallbackContext context);
    }
    public interface IPublicActions
    {
        void OnPositive(InputAction.CallbackContext context);
        void OnNegative(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
